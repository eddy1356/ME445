#include "lab2pkg/lab2.h" 
#define PI 3.14159265359
#define SPIN_RATE 20  /* Hz */

//arrays defining Waypoints
double home[]={163.86*PI/180,-76.09*PI/180,85.25*PI/180,-96.41*PI/180,-92.63*PI/180,75.40*PI/180};

double arr11[]={152.42*PI/180,-63.88*PI/180,101.55*PI/180,-125.08*PI/180,-93*PI/180,64.19*PI/180}; // POSITION 1 TOP
double arr12[]={152.40*PI/180,-58.40*PI/180,104*PI/180,-133.46*PI/180,-93.02*PI/180,64.22*PI/180}; // POSITION 1 MIDDLE
double arr13[]={152.39*PI/180,-52.42*PI/180,105.41*PI/180,-140.86*PI/180,-93.05*PI/180,64.25*PI/180}; // POSITION 1 BOTTOM

double arr21[]={163.22*PI/180, -65.16*PI/180, 105.19*PI/180, -128.49*PI/180, -92.36*PI/180, 74.96*PI/180}; // POSITION 2 TOP
double arr22[]={163.96*PI/180, -59.53*PI/180, 105.97*PI/180, -133.67*PI/180, -92.53*PI/180, 75.78*PI/180}; //POSITION 2 MIDDLE
double arr23[]={163.66*PI/180, -53.46*PI/180, 107.42*PI/180, -141.20*PI/180, -92.51*PI/180, 75.53*PI/180}; //POSITION 2 BOTTOM 

double arr31[]={175.24*PI/180, -63.33*PI/180, 100.98*PI/180, -124.38*PI/180, -91.91*PI/180, 87.00*PI/180}; // POSITION 3 TOP
double arr32[]={175.22*PI/180, -58.22*PI/180, 103.53*PI/180, -131.50*PI/180, -91.91*PI/180, 87.00*PI/180}; //POSITION 3 MIDDLE
double arr33[]={175.60*PI/180, -52.28*PI/180, 104.34*PI/180, -138.77*PI/180, -91.91*PI/180, 87.00*PI/180}; //POSITION 3 BOTTOM 


// array to define final velocity of point to point moves.  For now slow down to zero once 
// each point is reached
double arrv[]={0,0,0,0,0,0};

//vectors to be used to publish commands to UR3 ROS Driver (ece470_ur3_driver)
std::vector<double> QH (home,home+sizeof(home) / sizeof(home[0]));

std::vector<double> Q11 (arr11,arr11+sizeof(arr11) / sizeof(arr11[0]));
std::vector<double> Q12 (arr12,arr12+sizeof(arr12) / sizeof(arr12[0]));
std::vector<double> Q13 (arr13,arr13+sizeof(arr13) / sizeof(arr13[0]));

std::vector<double> Q21 (arr21,arr21+sizeof(arr21) / sizeof(arr21[0]));
std::vector<double> Q22 (arr22,arr22+sizeof(arr22) / sizeof(arr22[0]));
std::vector<double> Q23 (arr23,arr23+sizeof(arr23) / sizeof(arr23[0]));


std::vector<double> Q31 (arr31,arr31+sizeof(arr31) / sizeof(arr31[0]));
std::vector<double> Q32 (arr32,arr32+sizeof(arr32) / sizeof(arr32[0]));
std::vector<double> Q33 (arr33,arr33+sizeof(arr33) / sizeof(arr33[0]));



std::vector<double> v (arrv,arrv+sizeof(arrv) / sizeof(arrv[0]));

// creating an array of these vectors allows us to iterate through them
// and programatically choose where to go.
std::vector<double> Q [3][3] = { //[heigt][location]
    {Q11, Q12, Q13},
    {Q21, Q22, Q23},
    {Q31, Q32, Q33}
};

int HIGH = 0;
int MIDDLE = 1;
int BOTTOM = 2;

// Global bool variables that are assigned in the callback associated when subscribed 
// to the "ur3/position" topic
bool isReady=1;
bool pending=0;
bool succ = 0;
bool goOn = 1;

void succ_callback(const ur_msgs::IOStates msg) {
	succ = msg.digital_in_states[0].state;
}
// Whenever ur3/position publishes info this callback function is run.
void position_callback(const ece470_ur3_driver::positions::ConstPtr& msg)
{
	isReady=msg->isReady; // When isReady is True the robot arm has made it to its desired position
						  // and is ready to be told to go to another point if desired.
	pending=msg->pending; // pending is the opposite of isReady, pending is true until a new position is reached
//	ROS_INFO("Debug isRdy = %d, pending = %d",(int)isReady,(int)pending);
}


int move_arm(	ros::Publisher pub_command , ros::Rate loop_rate, std::vector<double> dest, float duration)
{
    int error = 0;
   	ece470_ur3_driver::command driver_msg;
   	driver_msg.duration = duration;
    driver_msg.destination=dest;  // Set desired position to move home 
	pub_command.publish(driver_msg);  // publish command, but note that is possible that
									  // the subscriber will not receive this message.
	int spincount = 0;
	while (isReady) { // Waiting for isReady to be false meaning that the driver has the new command
		ros::spinOnce();  // Allow other ROS functionallity to run
		loop_rate.sleep(); // Sleep and wake up at 1/20 second (1/SPIN_RATE) interval
		if (spincount > SPIN_RATE) {  // if isReady does not get set within 1 second re-publish
			pub_command.publish(driver_msg);
			ROS_INFO("Just Published again driver_msg");
			spincount = 0;
		}
		spincount++;  // keep track of loop count
	}
	ROS_INFO("waiting for rdy");  // Now wait for robot arm to reach the commanded waypoint.
	while(!isReady)
	{
		ros::spinOnce();
		loop_rate.sleep();
	}
    return error;
}

int move_block(ros::Publisher pub_command ,
                ros::Rate loop_rate,
                ros::ServiceClient srv_SetIO,
                ur_msgs::SetIO srv,
                int start_loc,
                int start_height,
                int end_loc,
                int end_height)
{
    int error = 0;
   	ece470_ur3_driver::command driver_msg;
   	move_arm(pub_command,loop_rate,QH,0.05);

    move_arm(pub_command,loop_rate,Q[start_loc][start_height],0.05);
    
    srv.request.fun = 1;
	srv.request.pin = 0;  //Digital Output 0
	srv.request.state = 1.0; //Set DO0 on
	
	if (srv_SetIO.call(srv)) {
		ROS_INFO("True: Switched Suction ON");
	} else {
		ROS_INFO("False");
	}
	int spincount = 0;

	while (isReady) { // Waiting for isReady to be false meaning that the driver has the new command
		ros::spinOnce();  // Allow other ROS functionallity to run
		loop_rate.sleep(); // Sleep and wake up at 1/20 second (1/SPIN_RATE) interval
		if (spincount > SPIN_RATE) {  // if isReady does not get set within 1 second re-publish
			pub_command.publish(driver_msg);
			ROS_INFO("Just Published again driver_msg");
			spincount = 0;
		}
		spincount++;  // keep track of loop count
	}

	if(succ == 1)
	{
		move_arm(pub_command,loop_rate,QH,0.05);
    	move_arm(pub_command,loop_rate,Q[end_loc][end_height],0.05);
		goOn = 1;
	} 
	else 
	{
		goOn = 0;
	}


	srv.request.fun = 1;
	srv.request.pin = 0; // Digital Output 0
	srv.request.state = 0.0; //Set DO0 off
	
	if (srv_SetIO.call(srv)) {
		ROS_INFO("True: Switched Suction OFF");
	} else {
		ROS_INFO("False");
	}
	move_arm(pub_command,loop_rate,QH,0.05);
	
	return error;
}

int solve(int start, int dest, int aux, 
			ros::Publisher pub_command,
            ros::Rate loop_rate,
            ros::ServiceClient srv_SetIO,
            ur_msgs::SetIO srv) 
{	
	move_block(pub_command,loop_rate,srv_SetIO, srv, (start - 1), 0, (dest - 1), 2);

	if(goOn){ move_block(pub_command,loop_rate,srv_SetIO, srv, (start - 1), 1, (aux - 1) , 2); }
	if(goOn){ move_block(pub_command,loop_rate,srv_SetIO, srv, (dest - 1), 2, (aux - 1), 1); }
	if(goOn){ move_block(pub_command,loop_rate,srv_SetIO, srv, (start - 1), 2, (dest - 1), 2); } //[location][height]

	if(goOn){ move_block(pub_command,loop_rate,srv_SetIO, srv, (aux - 1), 1, (start - 1), 2); }
	if(goOn){ move_block(pub_command,loop_rate,srv_SetIO, srv, (aux - 1), 2, (dest - 1), 1); }
	if(goOn){ move_block(pub_command,loop_rate,srv_SetIO, srv, (start - 1), 2, (dest - 1), 0); } 	
}

int main(int argc, char **argv)
{
    
	int inputdone = 0;
	int Loopcnt = 0;
//initialization & variable definition
	ros::init(argc, argv, "lab2node");	//initialzation of ros required for each Node.
	ros::NodeHandle nh;				//handler for this node.
	
	//initialized publisher ur3/command, buffer size of 10.
	ros::Publisher pub_command=nh.advertise<ece470_ur3_driver::command>("ur3/command",10);
	// initialize subscriber to ur3/position and call function position_callback each time data is published
	ros::Subscriber sub_position=nh.subscribe("ur3/position",1,position_callback);
	
	ros::Subscriber iostates = nh.subscribe("ur_driver/io_states", 1, succ_callback);

	ros::ServiceClient srv_SetIO = nh.serviceClient<ur_msgs::SetIO>("ur_driver/set_io");
	ur_msgs::SetIO srv;

	// ros::ServiceClient analog_IOStates = nh.serviceClient<ur_msgs::IOStates>("ur_driver/io_states");
	// ur_msgs::IOStates analog;

	ece470_ur3_driver::command driver_msg;

	int start = 0;
	int destination = 0;
	int aux = 0;

	std::string inputString;

	std::string FROM;
	std::string TO;

	std::string MORE;

	while(!ros::ok()){};	//check if ros is ready for operation
		
	ROS_INFO("sending Goals");

	ros::Rate loop_rate(SPIN_RATE); // Initialize the rate to publish to ur3/command
	int spincount = 0;
 
	while(!Loopcnt) {
		while (!inputdone) {
		std::cout << "From <Either 1 2 or 3>" ;
		std::getline(std::cin, FROM);

		std::cout<< "To <Either 1 2 or 3>";
		std::getline(std::cin, TO);

		if(FROM == TO) {
			std::cout<<"ERROR: Please move to a different location" << "\n";
			std::cout<< "To <Either 1 2 or 3>";
			std::getline(std::cin, TO);
		}

		if(FROM == "1") {
			start = 1;
			if(TO == "2") {
				destination = 2;
				aux = 3;
			} else {
				destination = 3;
				aux = 2;
			}
		}
		if(FROM == "2") {
			start = 2;
			if(TO == "3") {
				destination = 3;
				aux = 1;
			} else {
				destination = 1;
				aux = 3;
			}
		}
		if(FROM == "3") {
			start = 3;
			if(TO == "2") {
				destination = 2;
				aux = 1;
			} else {
				destination = 1;
				aux = 2;
			}
		}
		
		inputdone = 1;
		}
		
		solve(start,destination,aux, pub_command,loop_rate,srv_SetIO, srv);
		
		if(!goOn) {
			std::cout << "ERROR: Check starting position!" << "\n" ;
		}

		std::cout << "MORE? (Y/N)" << "\n";
		std::getline(std::cin, MORE);

		if(MORE == "Y" || MORE == "y") {
			Loopcnt = 0;
			inputdone = 0;
		} 
		if (MORE == "N" || MORE == "n") {
			Loopcnt = 1;
			inputdone = 1;
		}
	}
	return 0;
}
